---
title: "Creando un CRUD"
date: 2023-04-08T18:21:47+02:00
draft: false
weight: 80
icon: fa-solid fa-database
---

# Realizar un CRUD

{{% pageinfo%}}

#### CRUD

****
Vamos a hacer una aplicación que premita interactuar con una tabla en la base de datos a través de la aplicaicón.

La palabra CRUD viene de Create Read Update Delete, es decir, que desde nuestra aplicación podamos hacer estas acciones
sobre la tabla

{{<color_blue>}}Acciones necesarias{{</color_blue>}}
> * Creamos un proyecto nuevo
> * Crear la tabla
> * Poblar la tabla con valores
> * Crear un Modelo
> * Crear un Controlador de tipo recurso
> * Establecer las rutas y conocerlas
> * Escribir las acciones para cada método del controlador según la ruta solicitada
> * En cada solicitud crear la vista necesaria para visualizar información

{{% /pageinfo%}}

## Creando un proyecto nuevo

{{% pageinfo%}}
{{< highlight php "linenos=table, hl_lines=1" >}}
laravel new gestion_alumnos
{{< / highlight >}}
{{< alert title="Warning" color="warning" >}}
Puedes usar un proyecto que ya tuvieras
Podemos instalar {{<color_blue>}}breeze{{</color_blue>}} así ya tenemos tailwindcss disponible {{<color_blue>
}}tailwindcss{{</color_blue>}}
{{< /alert >}}

{{% /pageinfo%}}

## Crear los elementos necesarios:

En lugar de crear cada uno de los elementos :{{<color_green>}}tabla, factorías y seeder, modelo y controlador de tipo
recurso{{</color_green>}} vamos a usar un parámetro a la hora de creaer el modelo que lo crea todo
{{% pageinfo%}}
{{< highlight php "linenos=table, hl_lines=1" >}}
php artisan make:model Alumno --all
{{< / highlight >}}
{{< alert title="Importante" color="warning" >}}
El modelo simpre en singular
{{< /alert >}}
{{% imgproc creacion_model Fill "1000x500" %}}

{{% /imgproc %}}

{{% /pageinfo%}}





## Creamos los campos en la tabla

{{% pageinfo%}}

####  

****



Vamos a la migracion que hemos creado y añadimos los campos que consideremos

{{% imgproc tabla_alumnos Fill "200x100" %}}

{{% /imgproc %}}
Lo establecemos en el método {{<color_blue>}}Up(...){{</color_blue>}}

Aquí puedes ver todos los métodos que puedes
usar [Métodos para crear campos](https://laravel.com/docs/10.x/migrations#available-column-types)
{{< highlight php tabla_alumnos "linenos=table, hl_lines=4-8" >}}
public function up(): void {
Schema::create('alumnos', function (Blueprint $table) {
$table->id();
$table->string("nombre");
$table->string("direccion");
$table->integer("edad");
$table->string("email");
$table->string("dni");
$table->timestamps();
});
}
{{< / highlight >}}
{{< alert title="id()-timestamps()" color="warning" >}}
Estos métodos crean campos en la tabla

* {{<color_blue>}}id{{</color_blue>}}
* {{<color_blue>}}create_at{{</color_blue>}}
* {{<color_blue>}}update_at{{</color_blue>}}

{{< /alert >}}

{{% /pageinfo%}}

## Poblamos la tabla

{{% pageinfo%}}

### Creamos la factoría de valores

En
{{< highlight php "linenos=table, hl_lines=4-8 15 17 18 20 21" >}}
public function definition(): array
{
return [
"nombre" => fake()->name(),
"direccion" => fake()->address(),
"edad" => fake()->numberBetween(15, 75),
"email"=>fake()->email(),
"dni" => $this->dni()
//
];
}
private function dni()
{
// Genera un número de 8 dígitos
$numero = fake()->numberBetween(10000000, 99999999);
// Calcula la letra del DNI
$letras = "TRWAGMYFPDXBNJZSQVHLCKE";
$letraDNI = $letras[$numero % 23];
// Combina ambos para obtener un DNI completo
$dniCompleto = "$numero-$letraDNI";
return $dniCompleto;

    }

{{< / highlight >}}
{{< alert title="Observa" color="warning" >}}
usamos fake() para generar valores aleatorios

Como el dni no está, crearmos un método para hacerlo

El orden de las letras la podemos ver
aquí [Orden de las 23 letras](https://www.interior.gob.es/opencms/ca/servicios-al-ciudadano/tramites-y-gestiones/dni/calculo-del-digito-de-control-del-nif-nie/)
{{< /alert >}}

### Creamos la llamada a las factorías desde el seeder

Para ello vamos al seeder AlumnoSeeder
{{% imgproc seeder Fill "200x100" %}}

{{% /imgproc %}}
E invocamos a la factoria
{{< highlight php "linenos=table, hl_lines=1" >}}
//...
use App\Models\Alumno;

class AlumnoSeeder extends Seeder
{
public function run(): void {
Alumno::factory()->count(100)->create();

    }

}
{{< / highlight >}}
{{< alert title="use App\Models\Alumno;" color="warning" >}}
factory() es un métod del modelo
Para poderlo usar debemos de especificar su uso con la instruccióno {{<color_blue>}}use App\Models\Alumno {{<
/color_blue>}}
{{< /alert >}}

Ahora queda llamar al seeder a partir de la clase DatabaseSeeder
{{% imgproc databaseseeder Fill "300x150" %}}

{{% /imgproc %}}
{{< highlight php "linenos=table, hl_lines=3 4" >}}
public function run(): void
{
$this->call([
AlumnoSeeder::class
]);
}
{{< / highlight >}}
{{% /pageinfo%}}

## Ejecutamos las accciones sobre la base de datos

{{% pageinfo%}}

#### Configuramos la base de datos

En el fihcero {{<color_blue>}}.env{{</color_blue>}} establecemos los parámetros de conexión con el servidor de base de
datos donde vaya a estar el servidor de base de datos
****
Esta sería una configuración típica si estás usando {{<color_blue>}}wammp o xammp{{</color_blue>}}
{{< highlight env "linenos=table, hl_lines=2 4 5" >}}
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=gestion_alumnos
DB_USERNAME=root
DB_PASSWORD=
{{< / highlight >}}
Yo uso un docker y tengo esta configuración
{{< highlight env "linenos=table, hl_lines=3 5 6 7" >}}
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=23306
DB_PORT_PHPMYADMIN=8080
DB_DATABASE=nett
DB_USERNAME=nett
DB_PASSWORD=nett12345
DB_PASSWORD_ROOT=root12345
{{< / highlight >}}

Una vez configurado tenemos que ejecutar las migraciones para crear las tablas y ejectar el seeder para que las pueble
Lo podemos hacer con un único comando
{{< highlight bash "linenos=table, hl_lines=1" >}}
php artisan migrate --seed
{{< / highlight >}}
> {{< alert title="fresh " color="warning" >}}
> Si hubiera algún error o queremos modificar algo y volver a cargar la base de datos
> {{< /alert >}}

{{< highlight php "linenos=table, hl_lines=1" >}}
php artisan migrate:fresh --seed
{{< / highlight >}}

{{% /pageinfo%}}

## Creamos las rutas

{{% pageinfo%}}

####  

****

Ahora tenemos que establecer las rutas para las solicitudes
Simpelemente agregamos la ruta {{<color_blue>}}resources{{</color_blue>}} en fichero de rutas {{<color_blue>}}web.php{{<
/color_blue>}}

{{% imgproc web Fill "200x150" %}}

{{% /imgproc %}}
En él incluímos la sigueinte línea
{{< highlight php "linenos=table, hl_lines=1" >}}
Route::resource("Alumnos", \App\Http\Controllers\AlumnoController::class);
{{< / highlight >}}
Alternativamente puedes establecer con {{<color_blue>}}use{{</color_blue>}} que vas a utilizar ese {{<color_blue>
}}namespace{{</color_blue>}}
{{< highlight php "hl_lines=1 3" >}}
use App\Http\Controllers\AlumnoController;

Route::resource("Alumnos", AlumnoController::class);

{{< / highlight >}}
{{< alert title="Warning" color="warning" >}}
Ahora puedes ver las rutas escribiendo en el termina
{{< /alert >}}
{{< highlight php "linenos=table, hl_lines=1" >}}
php artisan route:list
{{< / highlight >}}
{{% imgproc routelist Fill "1500x200" %}}

{{% /imgproc %}}

{{% /pageinfo%}}

## Escribiendo los métodos y creando las vistas

{{% pageinfo%}}

####  

****


**Ahora debemos de realizar realmente la parte de programación**          
**Debemos de realizar cada una de las acciones ante cada solicitud y retornar una vista**    
{{% /pageinfo%}}

### Obtener listado de alumnos

{{% pageinfo%}}
{{% imgproc vistaListadoAlumnos Fill "200x100" %}}

{{% /imgproc %}}

#### Primero implementamos el controlador

{{<color_green>}}En el controlador implementaremos el método index.php{{</color_green>}}
{{% imgproc controlador Fill "200x100" %}}

{{% /imgproc %}}
{{< highlight php "linenos=table, hl_lines=6 10" >}}
public function index()
{
//Obtenemos todos los alumnos con el método all()
//del modelo correspondiente
//esto es lo mismo que select * from alumnos previa conexión a la bd
$alumnos = Alumno::all();

            //retronamos una vista a la que le pasamos una collección con todos los alumnos
            //una colección la gestionaremos como un array de objetos de alumnos
            return view ("alumnos.listado", ["alumnos"=>$alumnos]);
    }

{{< / highlight >}}

#### Ahora generamos la vista correspondiente

*Primero creamos la carpeta alumnos dentro de {{<color_blue>}}resources/view{{</color_blue>}} para tener todo más
organizado
{{% imgproc vistaListadoAlumnos Fill "400x100" %}}

{{% /imgproc %}}
{{< highlight php "linenos=table, hl_lines=16 18-22 " >}}
<!doctype html>
<html lang="en">
<head>
  <!--  ...    -->
</head>
<body>
    <h1>Listado de alumnos</h1>
    <table>
        <tr>
            <th>Nombre</th>
            <th>DNI</th>
            <th>Dirección</th>
            <th>Email</th>
            <th>Edad</th>
        </tr>
        @foreach($alumnos as $alumno)
            <tr>
                <td>{{$alumno->nombre}}</td>
                <td>{{$alumno->dni}}</td>
                <td>{{$alumno->direccion}}</td>
                <td>{{$alumno->email}}</td>
                <td>{{$alumno->edad}}</td>
            </tr>
        @endforeach
    </table>

</body>
</html>
{{< / highlight >}}

{{< alert title="directivas blade" color="warning" >}}

Observa cómo recorremos el array

Recibimos del controlador un {{<color_green>}}array $alumnos{{</color_green>}}
Es un array {{<color_green>}}de objetos de alumnos{{</color_green>}}
Visualizo {{<color_green>}}cada campo del alumno{{</color_green>}}
{{< /alert >}}
****
{{% /pageinfo%}}

### Crear un nuevo alumno

Crear un nuevo alumno es una acción de dos pasos

1. Primero retornamos un formulario para rellenar los datos del nuevo alumno
2. Segundo guardamos el alumno en la base de datos y retornamos todos un listado con todos los alumnos

#### Retornando el formulario

{{% pageinfo%}}

{{< imgproc createAlumno Fill "913x372" >}}

{{< /imgproc >}}

* Lo primero debemos de generar un botón en la vista para que el usuario pueda seleccionar la opción de crear un nuevo
  alumno.
* Para ello modificamos el fichero {{<color_blue>}}resources/view/alumnos/listado.blade.php{{</color_blue>}}
  {{< highlight php "linenos=table, hl_lines=3 6 7 9" >}}

<head>
<!-- -->
    @vite(["resources/css/app.css"])
</head>
<body>
<div class="flex flex-col justify-center items-center w-full">
<a href="{{route("alumnos.create")}}" class="bg-amber-700 text-4xl text-white p-5 m-5 rounded-3xl outline-4  ">Crear Nuevo Alumno</a>
    <table>
        <caption class="text-3xl text-green-800 mb-5">Listado de alumnos</caption>

       <!---->

</div>

{{< / highlight >}}
{{< alert title="Acciones" color="warning" >}}
Hemos usado tailwindcss y agregado {{<color_blue>}}el nuevo botón{{</color_blue>}}.    
La línea 7 es dónde añadimos el botón
Para referenciar la ruta que tiene nombre usamos el helper {{<color_blue>}}route(){{</color_blue>}}
Se da un poco de estilo para que el botón y la tabla queden en medio

{{< /alert >}}

#### El controlador

* Esta acción, {{<color_green>}}presionar el botón del formulario {{</color_green>}}, hará que se invoque el método {{<
  color_blue>}}create {{</color_blue>}} del controlador.
* Tenemos que especificar qué acción queremos hacer en el método correspondiente: {{<color_blue>}}create{{<
  /color_blue>}}.
* Necesitamos que nos retorne una vista con un formulario para insertar el nuevo alumno
  {{< highlight php "linenos=table, hl_lines=1" >}}
  public function create()
  {
  return view ("alumnos.create");
  //
  }
  {{< / highlight >}}
*

#### Creando la vista

{{< imgproc vistaCrearAlumno Fill "250x100" >}}
{{<color_green>}}Vista crear un alumno{{</color_green>}}
{{< /imgproc >}}

* Debemos retornar una vista con un formulario para rellenar datos de un nuevo {{<color_blue>}}alumno{{</color_blue>}}

El fichero {{<color_blue>}}create.blade.php{{</color_blue>}}


{{< highlight php "linenos=table, hl_lines=8 12 13 15 20 25 30 35 40" >}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Formulario</title>
    @vite(["resources/css/app.css"])
</head>

<body class="flex items-center justify-center h-screen bg-gray-100">
    <form action="" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <div class="mb-4">
            <label for="nombre" class="block text-gray-700 text-sm font-bold mb-2">Nombre:</label>
            <input type="text" name="nombre" id="nombre"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
        </div>
        <div class="mb-4">
            <label for="direccion" class="block text-gray-700 text-sm font-bold mb-2">Dirección:</label>
            <input type="text" name="direccion" id="direccion"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
        </div>
        <div class="mb-4">
            <label for="email" class="block text-gray-700 text-sm font-bold mb-2">Email:</label>
            <input type="text" name="email" id="email"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
        </div>
        <div class="mb-4">
            <label for="dni" class="block text-gray-700 text-sm font-bold mb-2">DNI:</label>
            <input type="text" name="dni" id="dni"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
        </div>
        <div class="flex items-center justify-between">
            <button type="submit"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                Guardar
            </button>
            <button type="button"
                class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                Cancelar
            </button>
        </div>
    </form>
</body>

</html>
{{< / highlight >}}

{{< alert title="El formulario" color="warning" >}}
Este html lo ha retornado chat-gpt para centrar el formulario      
Lo importante es respetar que {{<color_green>}}los name de los input sean los nombres de las tabls{{</color_green>}}
{{< /alert >}}

{{< imgproc formularioNuevoAlumno Fill "500x700" >}}

{{< /imgproc >}}

{{% /pageinfo%}}


